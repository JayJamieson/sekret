name: Deployment

on:
  push:
    branches:
      - "main"

env:
  ENVIRONMENT: "production"

jobs:
  build_and_push_image:
    name: Build docker image and push to repo
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.prepare.outputs.version }}
      image: ${{ steps.push-image.outputs.image }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install NodeJS
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Code Checkout
        uses: actions/checkout@v4

      - uses: pnpm/action-setup@v3
        name: Install pnpm
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - uses: actions/cache@v4
        name: Setup pnpm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run:  |
          cd ui
          pnpm install

      - name: Code Building
        run:   |
          cd ui
          pnpm run build

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Login to DockerHub
        id: docker-login-push
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Prepare parameters
        if: success()
        id: prepare
        run: |
          ORG_NAME="jayjamieson"
          echo ::set-output name=sekret_image::docker.io/${ORG_NAME}/sekret
          echo ::set-output name=version::$(git rev-parse --short HEAD).${GITHUB_RUN_NUMBER}

      - name: Echo Image name
        run: echo ${{ steps.prepare.outputs.sekret_image }}:${{ steps.prepare.outputs.version }}

      - name: Run docker build
        id: docker-build
        run: |
          echo "build ${{ steps.prepare.outputs.sekret_image }}"
          docker build --build-arg VERSION=${{ steps.prepare.outputs.version }} -t ${{ steps.prepare.outputs.sekret_image }} . --no-cache --rm

      - name: Push image
        id: push-image
        run: |
          docker tag ${{ steps.prepare.outputs.sekret_image }} ${{ steps.prepare.outputs.sekret_image }}:${{ steps.prepare.outputs.version }}
          docker push ${{ steps.prepare.outputs.sekret_image }}:${{ steps.prepare.outputs.version }}
          echo ::set-output name=image::${{ steps.prepare.outputs.sekret_image }}:${{ steps.prepare.outputs.version }}
